import api from '../lib/api'
import type  { loginRequest,loginResponse,cadastroRequest,cadastroResponse,solicitarCodigoRequest,
    solicitarCodigoResponse,
    validarCodigoRequest,
    validarCodigoResponse,
    redefinirSenhaRequest,
    redefinirSenhaResponse,
    chatIARequest,
    chatIAResponse  } from './types'


// Endpoint de login
export async function login(payload: loginRequest){
    const { data } = await api.post<loginResponse>("/login", payload)

    // Guardando o token e dados do usu√°rio
    if (data.token){
        localStorage.setItem('auth_token', data.token)
        
        // Salvar dados do usu√°rio para identifica√ß√£o autom√°tica
        if (data.usuario) {
            localStorage.setItem('user_data', JSON.stringify({
                id: data.usuario.id,
                nome: data.usuario.nome,
                email: data.usuario.email,
                perfil: data.usuario.perfil,
                cpf: data.usuario.cpf,
                cnpj: data.usuario.cnpj,
                telefone: data.usuario.telefone,
                endereco: data.usuario.endereco,
                razao_social: data.usuario.razao_social
            }))
        }
    }

    return data
}

// Fun√ß√£o para obter dados do usu√°rio logado
export function getLoggedUserData() {
    const userData = localStorage.getItem('user_data')
    if (userData) {
        try {
            return JSON.parse(userData)
        } catch (error) {
            console.error('Erro ao parsear dados do usu√°rio:', error)
            return null
        }
    }
    return null
}

// Fun√ß√£o para verificar se usu√°rio √© empresa
export function isUserCompany(): boolean {
    const userData = getLoggedUserData()
    return userData?.perfil === 'estabelecimento'
}

// Fun√ß√£o para limpar dados de autentica√ß√£o
export function logout() {
    localStorage.removeItem('auth_token')
    localStorage.removeItem('user_data')
}

// Endpoint de cadastro
export async function cadastrarUsuario(payload: cadastroRequest){
    const { data } = await api.post<cadastroResponse>("/usuarios/cadastro", payload)

    return data
}

// Endpoint para solicitar c√≥digo de recupera√ß√£o
export async function solicitarCodigoRecuperacao(payload: solicitarCodigoRequest){
    try {
        console.log('Solicitando c√≥digo para:', payload.email);
        const { data } = await api.post<solicitarCodigoResponse>("/recuperar-senha", payload)
        console.log('Resposta do servidor:', data);
        return data
    } catch (error: any) {
        console.error('Erro ao solicitar c√≥digo:', error.response?.data || error.message);
        throw error;
    }
}

// Endpoint para validar c√≥digo de recupera√ß√£o
export async function validarCodigo(payload: validarCodigoRequest){
    try {
        console.log('Validando c√≥digo:', payload.codigo);
        const { data } = await api.post<validarCodigoResponse>("/validar-codigo", payload)
        console.log('Resposta da valida√ß√£o:', data);
        return data
    } catch (error: any) {
        console.error('Erro ao validar c√≥digo:', error.response?.data || error.message);
        throw error;
    }
}

// Endpoint para redefinir senha
export async function redefinirSenha(payload: redefinirSenhaRequest){
    try {
        console.log('Redefinindo senha com c√≥digo:', payload.codigo);
        const { data } = await api.post<redefinirSenhaResponse>("/redefinir-senha", payload)
        console.log('Resposta da redefini√ß√£o:', data);
        return data
    } catch (error: any) {
        console.error('Erro ao redefinir senha:', error.response?.data || error.message);
        throw error;
    }
}

// ============================================
// CHAT IA - MOCKED IMPLEMENTATION
// ============================================

/**
 * Fun√ß√£o para interagir com a IA (VERS√ÉO MOCKADA)
 * 
 * Esta fun√ß√£o simula a chamada real √† API, mas retorna dados mockados.
 * A resposta funciona perfeitamente, mas n√£o vem do backend real.
 * 
 * COMO FUNCIONA:
 * 1. Recebe a mensagem do usu√°rio e o ID do usu√°rio
 * 2. Simula um delay de rede (200-500ms) para parecer real
 * 3. Analisa a mensagem e retorna uma resposta contextual baseada em palavras-chave
 * 4. Retorna dados mockados de promo√ß√µes, produtos, empresas, usu√°rios e endere√ßos
 * 
 * QUANDO INTEGRAR COM O BACKEND REAL:
 * - Descomente a linha: const { data } = await api.post<chatIAResponse>("/interagir", payload)
 * - Comente/remova toda a l√≥gica de mock (generateMockedResponse)
 * 
 * @param payload - Objeto contendo mensagem e idUsuario
 * @returns Promise com a resposta mockada da IA
 */
export async function interagirComIA(payload: chatIARequest): Promise<chatIAResponse> {
    try {
        console.log('ü§ñ Enviando mensagem para IA:', payload.mensagem);
        
        // ===== VERS√ÉO MOCKADA =====
        // Simula delay de rede (200-500ms)
        const delay = Math.floor(Math.random() * 300) + 200;
        await new Promise(resolve => setTimeout(resolve, delay));
        
        // Gera resposta mockada baseada na mensagem
        const mockedResponse = generateMockedResponse(payload.mensagem, delay);
        
        console.log('‚úÖ Resposta da IA (mockada):', mockedResponse);
        return mockedResponse;
        
        // ===== VERS√ÉO REAL (DESCOMENTE QUANDO INTEGRAR) =====
        // const { data } = await api.post<chatIAResponse>("/interagir", payload)
        // console.log('‚úÖ Resposta da IA:', data);
        // return data
        
    } catch (error: any) {
        console.error('‚ùå Erro ao interagir com IA:', error);
        
        // Retorna erro mockado
        return {
            status: false,
            status_code: 400,
            message: 'Erro ao processar sua mensagem',
            error: 'Servi√ßo temporariamente indispon√≠vel'
        };
    }
}

/**
 * Fun√ß√£o auxiliar para gerar respostas mockadas da IA
 * 
 * COMO FUNCIONA:
 * - Analisa a mensagem do usu√°rio procurando por palavras-chave
 * - Retorna respostas contextuais baseadas no que o usu√°rio perguntou
 * - Simula dados de promo√ß√µes, produtos, empresas, usu√°rios e endere√ßos
 * 
 * TIPOS DE PERGUNTAS SUPORTADAS:
 * 1. Busca de produtos espec√≠ficos: "leite", "arroz", "feij√£o", etc.
 * 2. Lista geral: "promo√ß√µes", "ofertas", "lista"
 * 3. Como funciona: "como funciona", "ajuda", "help"
 * 4. Localiza√ß√£o: "perto", "pr√≥ximo", "regi√£o"
 * 5. Pre√ßos: "barato", "melhor pre√ßo", "mais barato"
 * 
 * @param mensagem - Mensagem do usu√°rio
 * @param responseTime - Tempo de resposta simulado em ms
 * @returns Objeto chatIAResponse mockado
 */
function generateMockedResponse(mensagem: string, responseTime: number): chatIAResponse {
    const mensagemLower = mensagem.toLowerCase();
    
    // DADOS MOCKADOS - Simulam dados reais do backend
    // Cada promo√ß√£o tem: produto, empresa, usu√°rio, endere√ßo empresa e endere√ßo usu√°rio
    const promocoesMockadas = [
        // CARNES
        { produto: 'Carne Mo√≠da Bovina 1kg', preco: 22.90, empresa: 'A√ßougue Bom Corte', distancia: 0.8, endereco: 'Rua do Com√©rcio, 456 - Centro', usuario: 'Roberto Alves', enderecoUsuario: 'Av. Principal, 789 - Centro' },
        { produto: 'Carne Mo√≠da Premium 1kg', preco: 28.50, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Jo√£o Silva', enderecoUsuario: 'Av. Principal, 456 - Jardim' },
        { produto: 'Carne Mo√≠da Especial 1kg', preco: 24.90, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Maria Santos', enderecoUsuario: 'Rua Secund√°ria, 321 - Centro' },
        { produto: 'Frango Inteiro Congelado 1kg', preco: 12.90, empresa: 'Atacad√£o Popular', distancia: 3.5, endereco: 'Rod. Estadual, km 5 - Industrial', usuario: 'Pedro Costa', enderecoUsuario: 'Rua Terci√°ria, 654 - Bairro Alto' },
        { produto: 'Peito de Frango 1kg', preco: 15.90, empresa: 'A√ßougue Bom Corte', distancia: 0.8, endereco: 'Rua do Com√©rcio, 456 - Centro', usuario: 'Roberto Alves', enderecoUsuario: 'Av. Principal, 789 - Centro' },
        { produto: 'Picanha Bovina 1kg', preco: 52.90, empresa: 'A√ßougue Premium', distancia: 4.2, endereco: 'Av. Gourmet, 321 - Jardins', usuario: 'Fernando Lima', enderecoUsuario: 'Rua das Palmeiras, 159 - Jardins' },
        
        // LATIC√çNIOS
        { produto: 'Leite Integral 1L', preco: 4.99, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Jo√£o Silva', enderecoUsuario: 'Av. Principal, 456 - Jardim' },
        { produto: 'Leite Desnatado 1L', preco: 5.49, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Maria Santos', enderecoUsuario: 'Rua Secund√°ria, 321 - Centro' },
        { produto: 'Queijo Mussarela 500g', preco: 18.90, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Ana Paula', enderecoUsuario: 'Av. Brasil, 987 - Centro' },
        { produto: 'Iogurte Natural 170g', preco: 2.99, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Carlos Mendes', enderecoUsuario: 'Rua das Ac√°cias, 147 - Jardim' },
        { produto: 'Manteiga 200g', preco: 9.90, empresa: 'Atacad√£o Popular', distancia: 3.5, endereco: 'Rod. Estadual, km 5 - Industrial', usuario: 'Juliana Costa', enderecoUsuario: 'Rua Nova, 753 - Vila Nova' },
        
        // GR√ÉOS E CEREAIS
        { produto: 'Arroz Tipo 1 5kg', preco: 18.90, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Maria Santos', enderecoUsuario: 'Rua Secund√°ria, 321 - Centro' },
        { produto: 'Arroz Integral 1kg', preco: 6.50, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Jo√£o Silva', enderecoUsuario: 'Av. Principal, 456 - Jardim' },
        { produto: 'Feij√£o Preto 1kg', preco: 7.50, empresa: 'Atacad√£o Popular', distancia: 3.5, endereco: 'Rod. Estadual, km 5 - Industrial', usuario: 'Pedro Costa', enderecoUsuario: 'Rua Terci√°ria, 654 - Bairro Alto' },
        { produto: 'Feij√£o Carioca 1kg', preco: 6.90, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Carlos Mendes', enderecoUsuario: 'Rua das Ac√°cias, 147 - Jardim' },
        { produto: 'Macarr√£o Espaguete 500g', preco: 3.99, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Ana Paula', enderecoUsuario: 'Av. Brasil, 987 - Centro' },
        
        // √ìLEOS E TEMPEROS
        { produto: '√ìleo de Soja 900ml', preco: 6.99, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Ana Paula', enderecoUsuario: 'Av. Brasil, 987 - Centro' },
        { produto: 'Azeite Extra Virgem 500ml', preco: 24.90, empresa: 'Mercado Gourmet', distancia: 5.1, endereco: 'Rua Premium, 852 - Jardins', usuario: 'Ricardo Souza', enderecoUsuario: 'Av. Luxo, 369 - Jardins' },
        { produto: 'Sal Refinado 1kg', preco: 1.99, empresa: 'Atacad√£o Popular', distancia: 3.5, endereco: 'Rod. Estadual, km 5 - Industrial', usuario: 'Pedro Costa', enderecoUsuario: 'Rua Terci√°ria, 654 - Bairro Alto' },
        
        // A√á√öCARES E DOCES
        { produto: 'A√ß√∫car Cristal 1kg', preco: 3.49, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Carlos Mendes', enderecoUsuario: 'Rua das Ac√°cias, 147 - Jardim' },
        { produto: 'A√ß√∫car Refinado 1kg', preco: 3.99, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Jo√£o Silva', enderecoUsuario: 'Av. Principal, 456 - Jardim' },
        { produto: 'Chocolate em P√≥ 400g', preco: 8.90, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Maria Santos', enderecoUsuario: 'Rua Secund√°ria, 321 - Centro' },
        
        // BEBIDAS
        { produto: 'Caf√© Torrado 500g', preco: 12.90, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Jo√£o Silva', enderecoUsuario: 'Av. Principal, 456 - Jardim' },
        { produto: 'Refrigerante 2L', preco: 5.99, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Carlos Mendes', enderecoUsuario: 'Rua das Ac√°cias, 147 - Jardim' },
        { produto: 'Suco de Laranja 1L', preco: 7.50, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Ana Paula', enderecoUsuario: 'Av. Brasil, 987 - Centro' },
        
        // HIGIENE E LIMPEZA
        { produto: 'Sab√£o em P√≥ 1kg', preco: 9.90, empresa: 'Atacad√£o Popular', distancia: 3.5, endereco: 'Rod. Estadual, km 5 - Industrial', usuario: 'Pedro Costa', enderecoUsuario: 'Rua Terci√°ria, 654 - Bairro Alto' },
        { produto: 'Detergente L√≠quido 500ml', preco: 2.49, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Maria Santos', enderecoUsuario: 'Rua Secund√°ria, 321 - Centro' },
        { produto: 'Papel Higi√™nico 12 rolos', preco: 15.90, empresa: 'Supermercado Central', distancia: 2.6, endereco: 'Rua das Flores, 123 - Centro', usuario: 'Jo√£o Silva', enderecoUsuario: 'Av. Principal, 456 - Jardim' },
        { produto: 'Sabonete 90g', preco: 1.99, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Carlos Mendes', enderecoUsuario: 'Rua das Ac√°cias, 147 - Jardim' },
        
        // FRUTAS E VERDURAS
        { produto: 'Banana Prata 1kg', preco: 4.99, empresa: 'Hortifruti Central', distancia: 1.8, endereco: 'Rua das Frutas, 258 - Centro', usuario: 'Lucia Oliveira', enderecoUsuario: 'Av. Verde, 741 - Centro' },
        { produto: 'Tomate 1kg', preco: 5.50, empresa: 'Hortifruti Central', distancia: 1.8, endereco: 'Rua das Frutas, 258 - Centro', usuario: 'Lucia Oliveira', enderecoUsuario: 'Av. Verde, 741 - Centro' },
        { produto: 'Batata 1kg', preco: 3.99, empresa: 'Mercado Bom Pre√ßo', distancia: 1.2, endereco: 'Av. Comercial, 789 - Vila Nova', usuario: 'Maria Santos', enderecoUsuario: 'Rua Secund√°ria, 321 - Centro' },
        { produto: 'Cebola 1kg', preco: 4.50, empresa: 'Atacad√£o Popular', distancia: 3.5, endereco: 'Rod. Estadual, km 5 - Industrial', usuario: 'Pedro Costa', enderecoUsuario: 'Rua Terci√°ria, 654 - Bairro Alto' }
    ];
    
    // L√ìGICA DE RESPOSTA BASEADA EM PALAVRAS-CHAVE
    
    // Respostas variadas para parecer mais natural
    const respostasVariadas = {
        saudacoes: [
            "Ol√°! Como posso te ajudar hoje?",
            "Oi! Procurando alguma promo√ß√£o?",
            "E a√≠! Bora economizar? Me diz o que voc√™ precisa!",
            "Ol√°! Estou aqui pra te ajudar a encontrar os melhores pre√ßos."
        ],
        naoEncontrado: [
            `Hmm, n√£o encontrei nada sobre "${mensagem}" por aqui. Tenta me perguntar sobre produtos como leite, arroz, carne, frango, caf√©... Tenho v√°rias promo√ß√µes!`,
            `Poxa, n√£o achei "${mensagem}" nas promo√ß√µes dispon√≠veis. Que tal tentar: "frango perto de mim" ou "leite barato"?`,
            `Desculpa, n√£o tenho informa√ß√µes sobre "${mensagem}" no momento. Posso te ajudar com outros produtos como carne, arroz, feij√£o, frutas...`,
            `Opa, "${mensagem}" n√£o est√° na minha base agora. Mas posso te mostrar promo√ß√µes de outros produtos! Me pergunta sobre algo espec√≠fico.`
        ]
    };
    
    // 1. Sauda√ß√µes simples
    if (mensagemLower.match(/^(oi|ol√°|ola|hey|opa|e ai|eai)$/)) {
        const saudacao = respostasVariadas.saudacoes[Math.floor(Math.random() * respostasVariadas.saudacoes.length)];
        return {
            status: true,
            status_code: 200,
            data: {
                reply: saudacao,
                confidence: 1.0,
                response_time_ms: responseTime
            }
        };
    }
    
    // 2. Pergunta sobre como funciona o sistema
    if (mensagemLower.includes('como funciona') || mensagemLower.includes('ajuda') || mensagemLower.includes('help') || mensagemLower.includes('o que voc√™ faz')) {
        return {
            status: true,
            status_code: 200,
            data: {
                reply: `Eu te ajudo a encontrar os melhores pre√ßos dos produtos que voc√™ precisa! √â bem simples:

Voc√™ me pergunta sobre um produto (tipo "carne mo√≠da barata" ou "leite perto de mim") e eu busco as melhores ofertas pra voc√™, mostrando pre√ßo, dist√¢ncia e onde encontrar.

Alguns exemplos do que voc√™ pode me perguntar:
‚Ä¢ "quero frango barato"
‚Ä¢ "caf√© perto de mim"  
‚Ä¢ "onde tem arroz em promo√ß√£o?"
‚Ä¢ "preciso de leite"
‚Ä¢ "quais as promo√ß√µes hoje?"

√â s√≥ me dizer o que voc√™ precisa e eu acho pra voc√™! üòä`,
                confidence: 1.0,
                response_time_ms: responseTime
            }
        };
    }
    
    // 3. Lista geral de promo√ß√µes
    if (mensagemLower.includes('promo√ß√µes') || mensagemLower.includes('ofertas') || mensagemLower.includes('lista') || mensagemLower.includes('quais') && !mensagemLower.match(/\b(leite|carne|arroz|feij√£o|frango|caf√©|√≥leo|a√ß√∫car|banana|tomate)\b/)) {
        const topPromocoes = [...promocoesMockadas].sort((a, b) => a.distancia - b.distancia).slice(0, 5);
        const listaPromocoes = topPromocoes.map((promo, index) => 
            `${index + 1}. ${promo.produto} - R$ ${promo.preco.toFixed(2)}\n   ${promo.empresa} (${promo.distancia} km)`
        ).join('\n\n');
        
        return {
            status: true,
            status_code: 200,
            data: {
                reply: `Olha s√≥ as promo√ß√µes que achei perto de voc√™:\n\n${listaPromocoes}\n\nQuer saber mais sobre algum produto espec√≠fico? √â s√≥ me perguntar!`,
                confidence: 0.95,
                response_time_ms: responseTime
            }
        };
    }
    
    // 3. Busca por produto espec√≠fico
    // Melhor l√≥gica: procura palavras-chave do produto na mensagem
    let produtosEncontrados = promocoesMockadas.filter(promo => {
        const produtoLower = promo.produto.toLowerCase();
        const palavrasProduto = produtoLower.split(' ');
        const palavrasMensagem = mensagemLower.split(' ');
        
        // Verifica se alguma palavra importante do produto est√° na mensagem
        return palavrasProduto.some(palavraProduto => 
            palavrasMensagem.some(palavraMensagem => 
                palavraProduto.includes(palavraMensagem) || palavraMensagem.includes(palavraProduto)
            )
        );
    });
    
    // Se o usu√°rio pediu "perto" ou "pr√≥ximo", ordena por dist√¢ncia
    const pedePerto = mensagemLower.includes('perto') || mensagemLower.includes('pr√≥ximo') || mensagemLower.includes('proximo');
    if (pedePerto && produtosEncontrados.length > 0) {
        produtosEncontrados = produtosEncontrados.sort((a, b) => a.distancia - b.distancia);
    }
    
    // Se o usu√°rio pediu "barato" ou "mais barato", ordena por pre√ßo
    const pedeBarato = mensagemLower.includes('barato') || mensagemLower.includes('mais barato');
    if (pedeBarato && produtosEncontrados.length > 0) {
        produtosEncontrados = produtosEncontrados.sort((a, b) => a.preco - b.preco);
    }
    
    if (produtosEncontrados.length > 0) {
        // Respostas mais naturais e variadas
        const intros = [
            `Achei ${produtosEncontrados.length > 1 ? `${produtosEncontrados.length} op√ß√µes` : 'uma op√ß√£o'} pra voc√™!`,
            `Olha que legal, encontrei ${produtosEncontrados.length > 1 ? `${produtosEncontrados.length} ofertas` : 'uma oferta'} aqui:`,
            `Boa! Tenho ${produtosEncontrados.length > 1 ? `${produtosEncontrados.length} promo√ß√µes` : 'uma promo√ß√£o'} pra te mostrar:`,
            `Encontrei ${produtosEncontrados.length > 1 ? `${produtosEncontrados.length} op√ß√µes` : 'uma op√ß√£o'} interessantes:`
        ];
        
        const intro = intros[Math.floor(Math.random() * intros.length)];
        let resposta = intro + '\n\n';
        
        // Determina o t√≠tulo baseado no filtro
        let tituloSecao = '';
        if (pedePerto) {
            tituloSecao = produtosEncontrados.length > 1 ? 'üìç Ordenadas da mais perto pra mais longe:' : 'üéØ A mais perto de voc√™:';
        } else if (pedeBarato) {
            tituloSecao = produtosEncontrados.length > 1 ? 'üí∞ Ordenadas da mais barata pra mais cara:' : 'üí∞ A mais barata:';
        } else {
            tituloSecao = produtosEncontrados.length > 1 ? 'üèÜ Todas as op√ß√µes dispon√≠veis:' : 'üèÜ Melhor op√ß√£o:';
        }
        
        resposta += tituloSecao + '\n\n';
        
        // Mostra TODAS as op√ß√µes com detalhes completos
        produtosEncontrados.forEach((promo, index) => {
            // Adiciona separador entre produtos (exceto antes do primeiro)
            if (index > 0) {
                resposta += '\n' + '‚îÄ'.repeat(40) + '\n\n';
            }
            
            // N√∫mero da op√ß√£o
            resposta += `${index + 1}. ${promo.produto}\n`;
            resposta += `üí∞ R$ ${promo.preco.toFixed(2)}\n`;
            resposta += `üè™ ${promo.empresa}\n`;
            resposta += `üìç ${promo.distancia} km - ${promo.endereco}\n`;
            resposta += `üë§ Cadastrado por ${promo.usuario}`;
            
            // Destaca a melhor op√ß√£o
            if (index === 0) {
                if (pedePerto) {
                    resposta += ` ‚≠ê (Mais perto!)`;
                } else if (pedeBarato) {
                    resposta += ` ‚≠ê (Mais barato!)`;
                } else {
                    resposta += ` ‚≠ê (Recomendado!)`;
                }
            }
            
            resposta += '\n';
        });
        
        // Adiciona dica final
        if (produtosEncontrados.length > 1) {
            resposta += `\nüí° Dica: ${pedePerto ? 'A primeira op√ß√£o √© a mais pr√≥xima de voc√™!' : pedeBarato ? 'A primeira op√ß√£o tem o melhor pre√ßo!' : 'Todas as op√ß√µes est√£o dispon√≠veis!'}`;
        }
        
        return {
            status: true,
            status_code: 200,
            data: {
                reply: resposta,
                confidence: 0.9,
                response_time_ms: responseTime
            }
        };
    }
    
    // 4. Busca por localiza√ß√£o/proximidade
    if (mensagemLower.includes('perto') || mensagemLower.includes('pr√≥ximo') || mensagemLower.includes('regi√£o')) {
        const promocoesProximas = [...promocoesMockadas].sort((a, b) => a.distancia - b.distancia).slice(0, 3);
        const listaProximas = promocoesProximas.map((promo, index) => 
            `**${index + 1}.** ${promo.produto} - ${promo.empresa}\nüí∞ R$ ${promo.preco.toFixed(2)} ‚Ä¢ üìç **${promo.distancia} km** ‚Ä¢ ${promo.endereco}`
        ).join('\n\n');
        
        return {
            status: true,
            status_code: 200,
            data: {
                reply: `üìç **Promo√ß√µes mais pr√≥ximas de voc√™:**\n\n${listaProximas}\n\nüöó As dist√¢ncias s√£o calculadas a partir da sua localiza√ß√£o atual!`,
                confidence: 0.88,
                response_time_ms: responseTime
            }
        };
    }
    
    // 5. Busca por pre√ßo/barato
    if (mensagemLower.includes('barato') || mensagemLower.includes('pre√ßo') || mensagemLower.includes('econom')) {
        const promocoesBaratas = [...promocoesMockadas].sort((a, b) => a.preco - b.preco).slice(0, 3);
        const listaBaratas = promocoesBaratas.map((promo, index) => 
            `**${index + 1}.** ${promo.produto}\nüí∞ **R$ ${promo.preco.toFixed(2)}** ‚Ä¢ üè™ ${promo.empresa} ‚Ä¢ üìç ${promo.distancia} km`
        ).join('\n\n');
        
        return {
            status: true,
            status_code: 200,
            data: {
                reply: `üí∞ **Melhores pre√ßos encontrados:**\n\n${listaBaratas}\n\n‚ú® Economize comprando nas promo√ß√µes certas!`,
                confidence: 0.92,
                response_time_ms: responseTime
            }
        };
    }
    
    // 6. Resposta padr√£o quando n√£o entende a pergunta
    const respostaPadrao = respostasVariadas.naoEncontrado[Math.floor(Math.random() * respostasVariadas.naoEncontrado.length)];
    return {
        status: true,
        status_code: 200,
        data: {
            reply: respostaPadrao,
            confidence: 0.5,
            response_time_ms: responseTime
        }
    };
}